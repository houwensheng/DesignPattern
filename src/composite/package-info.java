/**
 * 合成模式属于对象的结构模式，有时又叫做“部分——整体”模式。
 * 合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。
 * 合成模式可以使客户端将单纯元素与复合元素同等看待。
 * 
 * 这里所说的安全性合成模式是指：
 * 从客户端使用合成模式上看是否更安全，如果是安全的，那么就不会有发生误操作的可能，能访问的方法都是被支持的。
 * 这里所说的透明性合成模式是指：
 * 从客户端使用合成模式上，是否需要区分到底是“树枝对象”还是“树叶对象”。
 * 如果是透明的，那就不用区分，对于客户而言，都是Compoent对象，具体的类型对于客户端而言是透明的，是无须关心的。
 * 
 * 对于合成模式而言，在安全性和透明性上，会更看重透明性，毕竟合成模式的目的是：
 * 让客户端不再区分操作的是树枝对象还是树叶对象，而是以一个统一的方式来操作。
 * 而且对于安全性的实现，需要区分是树枝对象还是树叶对象。
 * 有时候，需要将对象进行类型转换，却发现类型信息丢失了，只好强行转换，这种类型转换必然是不够安全的。
 * 因此在使用合成模式的时候，建议多采用透明性的实现方式。
 * 
 * 组合模式非常适合有递归迭代性质的结构或者逻辑。
 * 即结构上存在树型或者包含关系，逻辑上"整体"和"部分"的行为和状态的对外表现是一致的，或者是类似的。
 * 
 * 比如目录和文件，目录可以只包含子目录，也可以只包含文件，当然可以同时包含子目录和文件。而子目录又可以包含子目录或者文件。
 * 再比如公司，部门和员工。公司可以只包含员工，也可以只包含部门，也可以包含子公司，当然可以同时包含员工和部门和子公司。
 * 而子公司又可以包含子公司或者部门。
 * 
 *  组合模式就是抽象出相同的逻辑或者状态，使得访问"整体"和“部分”达到高度统一。
 */
/**
 * @author HR
 *
 */
package composite;